import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["touchRippleRef", "inputProps", "onChange", "color", "size", "checked", "sx", "value", "inputRef"],
  _excluded2 = ["startIcon", "color", "endIcon", "size", "sx", "variant"],
  _excluded3 = ["color", "size", "sx"],
  _excluded4 = ["name", "checkedIcon", "color", "disableRipple", "disableFocusRipple", "disableTouchRipple", "edge", "icon", "inputProps", "inputRef", "size", "sx", "onChange", "onClick"];
import * as React from 'react';
import JoyCheckbox from '@mui/joy/Checkbox';
import JoyInput from '@mui/joy/Input';
import JoyFormControl from '@mui/joy/FormControl';
import JoyFormLabel from '@mui/joy/FormLabel';
import JoyButton from '@mui/joy/Button';
import JoyIconButton from '@mui/joy/IconButton';
import JoySwitch from '@mui/joy/Switch';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function convertColor(color) {
  if (color === 'secondary') {
    return 'primary';
  }
  if (color === 'error') {
    return 'danger';
  }
  if (color === 'default' || color === 'inherit') {
    return 'neutral';
  }
  return color;
}
function convertSize(size) {
  return size ? {
    small: 'sm',
    medium: 'md',
    large: 'lg'
  }[size] : size;
}
function convertVariant(variant) {
  return variant ? {
    outlined: 'outlined',
    contained: 'solid',
    text: 'plain',
    standard: 'plain',
    filled: 'soft'
  }[variant] : variant;
}
const Checkbox = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      inputProps,
      onChange,
      checked,
      inputRef
    } = _ref,
    props = _objectWithoutPropertiesLoose(_ref, _excluded);
  return /*#__PURE__*/_jsx(JoyCheckbox, _extends({}, props, {
    slotProps: {
      input: _extends({}, inputProps, {
        ref: inputRef
      })
    },
    ref: ref,
    checked: checked,
    onChange: onChange
  }));
});
const TextField = /*#__PURE__*/React.forwardRef(({
  onChange,
  label,
  placeholder,
  value,
  inputRef,
  type
}, ref) => {
  return /*#__PURE__*/_jsxs(JoyFormControl, {
    ref: ref,
    children: [/*#__PURE__*/_jsx(JoyFormLabel, {
      sx: {
        fontSize: 12
      },
      children: label
    }), /*#__PURE__*/_jsx(JoyInput, {
      type: type,
      value: value,
      onChange: onChange,
      placeholder: placeholder,
      size: "sm",
      slotProps: {
        input: {
          ref: inputRef
        }
      }
    })]
  });
});
const Button = /*#__PURE__*/React.forwardRef(function Button(_ref2, ref) {
  var _convertVariant;
  let {
      startIcon,
      color,
      endIcon,
      size,
      sx,
      variant
    } = _ref2,
    props = _objectWithoutPropertiesLoose(_ref2, _excluded2);
  return /*#__PURE__*/_jsx(JoyButton, _extends({}, props, {
    size: convertSize(size),
    color: convertColor(color),
    variant: (_convertVariant = convertVariant(variant)) != null ? _convertVariant : 'plain',
    ref: ref,
    startDecorator: startIcon,
    endDecorator: endIcon,
    sx: sx
  }));
});
const IconButton = /*#__PURE__*/React.forwardRef(function IconButton(_ref3, ref) {
  var _convertColor;
  let {
      color,
      size,
      sx
    } = _ref3,
    props = _objectWithoutPropertiesLoose(_ref3, _excluded3);
  return /*#__PURE__*/_jsx(JoyIconButton, _extends({}, props, {
    size: convertSize(size),
    color: (_convertColor = convertColor(color)) != null ? _convertColor : 'neutral',
    variant: "plain",
    ref: ref,
    sx: sx
  }));
});
const Switch = /*#__PURE__*/React.forwardRef(function Switch(_ref4, ref) {
  let {
      name,
      color: colorProp,
      edge,
      icon,
      inputProps,
      inputRef,
      size,
      sx,
      onChange,
      onClick
    } = _ref4,
    props = _objectWithoutPropertiesLoose(_ref4, _excluded4);
  return /*#__PURE__*/_jsx(JoySwitch, _extends({}, props, {
    onChange: onChange,
    size: convertSize(size),
    color: convertColor(colorProp),
    ref: ref,
    slotProps: {
      input: _extends({}, inputProps, {
        name,
        onClick: onClick,
        ref: inputRef
      }),
      thumb: {
        children: icon
      }
    },
    sx: [_extends({}, edge === 'start' && {
      ml: '-8px'
    }, edge === 'end' && {
      mr: '-8px'
    }), ...(Array.isArray(sx) ? sx : [sx])]
  }));
});
const joySlots = {
  baseCheckbox: Checkbox,
  baseTextField: TextField,
  baseButton: Button,
  baseIconButton: IconButton,
  baseSwitch: Switch
  // BaseFormControl: MUIFormControl,
  // baseSelect: Select,
  // baseSelectOption: Option,
  // BaseTooltip: MUITooltip,
  // BasePopper: MUIPopper,
};

export default joySlots;